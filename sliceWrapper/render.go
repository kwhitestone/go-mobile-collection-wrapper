// Copyright 2014 Brett Slatkin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sliceWrapper

import (
	"fmt"
	"io"
	"path/filepath"
	"strings"
	"text/template"
)

const pointerHeaderTemplate = `// generated by slice-wrapper -- DO NOT EDIT
package {{.Package}}

import (
    "fmt"
    "encoding/json"
)
`

const fullHeaderTemplate = `// generated by slice-wrapper -- DO NOT EDIT
package {{.Package}}

import (
    "fmt"
    "encoding/json"
	"reflect"
)
`

var (
	generatedPointerHeaderTemplate = template.Must(template.New("render").Parse(pointerHeaderTemplate))
	generatedFullHeaderTemplate    = template.Must(template.New("render").Parse(fullHeaderTemplate))
	generatedPointerTemplate       = template.Must(template.New("render").Parse(pointerTemplate))
	generatedObjectTemplate        = template.Must(template.New("render").Parse(objectTemplate))
)

type GeneratedType struct {
	Name string
	NameTitle string
	PointerType bool
}

//func getRenderedPath(inputPath string) (string, error) {
//	if !strings.HasSuffix(inputPath, ".go") {
//		return "", fmt.Errorf("Input path %s doesn't have .go extension", inputPath)
//	}
//	trimmed := strings.TrimSuffix(inputPath, ".go")
//	dir, file := filepath.Split(trimmed)
//	return filepath.Join(dir, fmt.Sprintf("%s_slice.go", file)), nil
//}

func getTypeRenderPath(inputPath string, typeName string) (string, error) {
	if !strings.HasSuffix(inputPath, ".go") {
		return "", fmt.Errorf("Input path %s doesn't have .go extension", inputPath)
	}
	trimmed := strings.TrimSuffix(inputPath, ".go")
	dir, _ := filepath.Split(trimmed)
	return filepath.Join(dir, fmt.Sprintf("%s_slice.go", typeName)), nil
}

type generateTemplateData struct {
	Package string
	Types     []GeneratedType
}

func render(w io.Writer, packageName string, types []GeneratedType) error {
	if len(types) == 0 {
		return nil
	}

	pointerTypes := make([]GeneratedType, 0)
	objectTypes := make([]GeneratedType, 0)
	for _, t := range types {
		if t.PointerType {
			pointerTypes = append(pointerTypes, t)
		} else {
			objectTypes = append(objectTypes, t)
		}
	}

	hTemplate := generatedPointerHeaderTemplate
	if len(objectTypes) > 0 {
		hTemplate = generatedFullHeaderTemplate
	}

	hErr := hTemplate.Execute(w, generateTemplateData{Package: packageName})
	if hErr != nil {
		return hErr
	}

	if len(pointerTypes) > 0 {
		pErr := generatedPointerTemplate.Execute(w, generateTemplateData{packageName, pointerTypes})
		if pErr != nil {
			return pErr
		}
	}
	if len(objectTypes) > 0 {
		return generatedObjectTemplate.Execute(w, generateTemplateData{packageName, objectTypes})
	}
	return nil
}
